"""
Main router and entry point handlers for the university assistance bot.

This module handles:
- Bot startup command (/start)
- Main menu navigation
- Routing to different functional sections

Sections include:
- University information
- Location services
- Dormitory information
- Emergency contacts
- Language checking
- Main menu navigation

"""
import os
import traceback
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from config.logger import logger
from handlers.main_handlers.keyboard import main_roots_keyboard, language_selection
from handlers.university_handlers.university_info_keyboard import info_keyboard
from handlers.dormitory_handlers.dormitory_keyboard import dormitory_keyboard
from aiogram.types import CallbackQuery, FSInputFile, Message
from handlers.critical_info_handlers.critical_keyboard import critical_keyboard
from handlers.location_handlers.location_keyboard import uni_loc_keyboard
from handlers.language_check_handlers.language_check_keyboard import language_keyboard, go_to_lessons
from handlers.sber_handlers.sber_keyboard import sber_keyboard
from handlers.main_handlers.languages import TEXTS
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from services.database.functions_database import check_user_exists, create_user

class LanguageState(StatesGroup):
    waiting_for_language = State()


class UserRegistration(StatesGroup):
    waiting_for_name = State()

router = Router()
user_languages = {}

@router.message(CommandStart())
async def send_welcome(message: types.Message, state: FSMContext):
    try:
        logger.info(f'User {message.from_user.id} started bot')
        await state.set_state(LanguageState.waiting_for_language)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
                           reply_markup=language_selection())
    except Exception as e:
        logger.error(f'Welcome error: {e}\n{traceback.format_exc()}')

@router.callback_query(F.data == 'start_again')
async def send_welcome_callback(callback: CallbackQuery, state: FSMContext):
    try:
        logger.info(f'User {callback.from_user.id} started bot')
        await state.set_state(LanguageState.waiting_for_language)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
                           reply_markup=language_selection())
    except Exception as e:
        logger.error(f'Welcome error: {e}\n{traceback.format_exc()}')


@router.callback_query(F.data.in_(["russian", "english", "french", "spanish", "chinese", "indian"]))
async def set_language(callback: CallbackQuery, state: FSMContext):
    try:
        lang_map = {
            "russian": "ru",
            "english": "en",
            "french": "fr",
            "spanish": "es",
            "chinese": "cn",
            "indian": "hi"
        }

        lang_code = callback.data
        language = lang_map.get(lang_code, "ru")

        await state.update_data(language=language)

        user_languages[callback.from_user.id] = language

        if os.path.exists('utility_files/gif_kant.gif'):
            gif_file = FSInputFile('utility_files/gif_kant.gif')
            await callback.message.answer_animation(
                animation=gif_file,
                caption=TEXTS[language]['greetings'],
                reply_markup=main_roots_keyboard(language),
                parse_mode="Markdown"
            )

            await callback.message.delete()


        else:
            await callback.message.edit_text(
                text=TEXTS[language]['greetings'],
                reply_markup=main_roots_keyboard(language),
                parse_mode="Markdown")

        await callback.answer()

    except Exception as e:
        logger.error(f'Language selection error: {e}\n{traceback.format_exc()}')
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞")


@router.callback_query(F.data == "info")
async def university_info(callback: CallbackQuery, language: str):
    """Display university information section."""
    try:
        text = f"üéì {TEXTS[language]['keyboards']['main_keyboard']['info']}"
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=info_keyboard(language), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f'University info error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['info_error']}")


@router.callback_query(F.data == "location")
async def location_info(callback: CallbackQuery, language: str):
    """Display university location information."""
    try:
        text = f"üìç {TEXTS[language]['keyboards']['main_keyboard']['location']}"
        await callback.message.delete()
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=uni_loc_keyboard(language))
        await callback.answer()
    except Exception as e:
        logger.error(f'Location info error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['info_error']}")


@router.callback_query(F.data == "dormitory")
async def dormitory_info(callback: CallbackQuery, language: str):
    """Display dormitory information section."""
    try:
        text = f"üèòÔ∏è {TEXTS[language]['keyboards']['main_keyboard']['dormitory']}"
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=dormitory_keyboard(language), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f'Dormitory info error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['info_error']}")


@router.callback_query(F.data == "critical")
async def emergency_info(callback: CallbackQuery, language: str):
    """Display emergency contacts and critical information."""
    try:
        text = f"‚ö†Ô∏è {TEXTS[language]['keyboards']['main_keyboard']['critical']}"
        await callback.message.delete()
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=critical_keyboard(language))
        await callback.answer()
    except Exception as e:
        logger.error(f'Emergency info error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['info_error']}")


@router.callback_query(F.data == "sber")
async def sber_info(callback: CallbackQuery, language: str):
    """SBER"""
    try:
        text = f"üí≥ {TEXTS[language]['keyboards']['main_keyboard']['sber']}"
        await callback.message.delete()
        await callback.message.answer(text, parse_mode="Markdown", reply_markup=sber_keyboard(language))
        await callback.answer()
    except Exception as e:
        logger.error(f'SBER info error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['info_error']}")



@router.callback_query(F.data == "language_check")
async def language_check_info(callback: CallbackQuery, language: str, state: FSMContext):
    """Display language checking tools section with user check."""
    try:
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_exists = await check_user_exists(user_id)

        if not user_exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
            await callback.message.answer("üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(UserRegistration.waiting_for_name)
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        text = f"üá∑üá∫ {TEXTS[language]['keyboards']['main_keyboard']['language_check']}"
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=go_to_lessons(language), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.error(f'Language check error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['info_error']}")



@router.message(UserRegistration.waiting_for_name)
async def process_name(message: Message, state: FSMContext, language: str):
    try:
        user_name = message.text.strip()
        user_id = message.from_user.id

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if len(user_name) < 2:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        if len(user_name) > 50:
            await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        success = await create_user(
            telegram_id=user_id,
            username=user_name
        )

        if success:
            await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_name}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ")
            await state.clear()

            # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º language_chec
            text = f"üá∑üá∫ {TEXTS[language]['keyboards']['main_keyboard']['language_check']}"
            await message.answer(text, reply_markup=go_to_lessons(language), parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()

    except Exception as e:
        logger.error(f"Name processing error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery, language: str):
    """Return to main menu from any section."""
    try:
        text = f"{TEXTS[language]['greetings']}"
        await callback.message.edit_text(text, reply_markup=main_roots_keyboard(language), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.error(f'Back to main error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"{TEXTS[language]['errors']['back_error']}")
