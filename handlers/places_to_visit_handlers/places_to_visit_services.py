import asyncio
import sqlite3
from typing import List, Dict, Any
from langchain_gigachat import GigaChat
from langchain.schema import HumanMessage
import random

from config.settings import settings

class PlacesDatabase:
    def __init__(self, db_path: str = "places.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """DB initialization and tables creation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS places (
                    id INTEGER PRIMARY KEY,
                    name TEXT NOT NULL,
                    type TEXT NOT NULL,
                    description TEXT,
                    link TEXT,
                    is_seasonal BOOLEAN DEFAULT 0,
                    best_season TEXT,
                    indoor BOOLEAN DEFAULT 0
                )
            ''')

            cursor.execute('''
                CREATE TABLE IF NOT EXISTS events (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT,
                    start_date TEXT,
                    end_date TEXT,
                    link TEXT,
                    is_active BOOLEAN DEFAULT 1
                )
            ''')

            conn.commit()

    def populate_database(self):
        """DB fill"""
        places_data = [
            (1, "Фьюжн Экспресс", "кафе",
             "Целевая аудитория - зуммеры. В кафе «Фьюжн экспресс» подают вкусную паназиатскую еду с большими порциями. В меню представлен широкий выбор блюд, включая лапшу, рамен, вок и другие азиатские блюда. Есть блюда, которые подходят для вегетарианцев и веганов. Цены доступные, обслуживание оперативное. Предлагаются напитки, к примеру чай и кофе. Есть возможность заказать блюда на вынос и по телефону.",
             "https://fusion-ex.su", 0, "all", 1),
            (2, "Нижний пруд/Нижнее озеро/Нижка", "пруд/озеро",
             "Место встреч студентов физмата, а кроме этого отличное место для прогулки, пробежки, тихий отдых",
             "https://go.2gis.com/oyFpe", 1, "spring,summer,autumn", 0),
            (3, "Гарри Джонсон", "бар",
             "Это место, где можно расслабиться после рабочего дня или провести вечер с друзьями. Это отличное место, где можно найти напитки на любой вкус. Посетители особенно выделяют большой выбор коктейлей и шотов. Бармены всегда готовы помочь с выбором и поддержать интересный разговор. Интерьер заведения оформлен в стильном дизайне. В выходные дни бар превращается в танцпол с живой музыкой, что очень нравится гостям. Охранники обеспечивают безопасность посетителей. Это одно из любимых мест для отдыха как одного человека, так и компании друзей.",
             "https://go.2gis.com/T3Mzi", 0, "all", 1),
            (4, "Ельцин", "бар",
             "Бар с атмосферой СССР, но с современной ироничной подачей. Это бар крафтового пива, который привлекает внимание стильным интерьером в стиле андерграунда. Гости отмечают большой выбор крафтового пива и интересные закуски. Здесь часто проходят концерты, вечеринки с живой музыкой и чемпионаты по кикеру. Посетители особенно выделяют безалкогольные напитки и вкусную еду, например картофельные дольки с сыром и луком или карривурст. Также здесь есть галерея для местных художников и фотографов.",
             "https://go.2gis.com/k2i7Y", 0, "all", 1),
            (5, "Вагонка", "клуб/концертная площадка",
             "Клуб «Вагонка» расположен в здании бывшей немецкой Кирхи Христа в Ратсхофе (нем. Christuskirche in Ratshof). История заведения началась в 1977 года, «Вагонка» – старейший клуб России и достопримечательность региона.",
             "http://vagonka.net", 0, "all", 1),
            (6, "Резиденция королей", "развлекательный центр",
             "Гостей ждут семь ресторанов: пивоварня «Брецель», траттория «Джузеппе», Cafe «La Russe», восточный ресторан «Шафран», «Хинкали», гриль-ресторан «Веранда», «Королевский Дворик». Продолжить вечер с веселой компанией можно в Караоке и танцевальном баре «Berry».",
             "https://go.2gis.com/jqYy5", 0, "all", 1),
            (7, "Планета", "ночной клуб",
             "Это место, которое многие считают отличным для отдыха. Гости отмечают высокий уровень обслуживания и профессионализм персонала. Особенно выделяют быстрое обслуживание на баре и в зале, а также возможность заказать авторские коктейли. Клиенты часто упоминают дружелюбных сотрудников и приятную музыку в Chill-out зоне с удобными диванами для игры в PlayStation. Многие положительно отзываются о качестве еды и напитков, а также о внимательном отношении персонала к гостям.",
             "https://go.2gis.com/crItT", 0, "all", 1),
            (8, "Заря", "кинотеатр",
             "Арт-пространство и кинотеатр - можно снять кинотеатр/зал под себя на самом красивом проспекте города",
             "https://go.2gis.com/4155g", 0, "all", 1),
            (9, "Лондон", "ресторан/паб",
             "Это заведение привлекает внимание большим выбором пива и вкусной кухни. Гости отмечают, что здесь можно отлично провести время как в будние дни, так и на выходных. Интерьер оформлен в английском стиле. В ресторане часто проходят концерты и дискотеки.",
             "https://go.2gis.com/S4QMU", 0, "all", 1),
            (10, "Fiji", "ночной клуб/бар/караоке",
             "Люди отмечают здесь уютную атмосферу, вкусную кухню и качественные напитки. Внутри заведения есть барная стойка со стульями, а также столы. Музыка в FIJI — это смесь треков с радио Европа+ с обработкой от диджея. Также есть караоке. Цены в заведении — умеренные. Проводятся разные мероприятия и акции.",
             "https://go.2gis.com/uLqov", 0, "all", 1),
            (11, "Nisha", "ночной клуб",
             "Это ночной клуб с двумя танцполами. Здесь можно послушать как прогрессивную, так и поп-музыку. Гости отмечают приятный интерьер, который создаёт комфортную обстановку. Персонал всегда готов помочь с выбором напитков или ответить на вопросы посетителей. Также здесь есть два зала для танцев: больший для энергичных вечеринок и меньший для тех, кто предпочитает более спокойное времяпрепровождение под музыку разных жанров.",
             "https://go.2gis.com/VOGiT", 0, "all", 1),
            (12, "Моррисон", "бар",
             "Это заведение привлекает живой музыкой и танцами. Гости отмечают, что здесь играет рок-музыка, а в выходные дни бар всегда полон людей. Интерьер оформлен в стиле рока. Посетители особенно выделяют большой выбор пива и вкусные закуски к нему, например, чипсы собственного приготовления и фирменные брускетты. В меню есть разнообразный ассортимент пива разных сортов на любой вкус, а также авторские коктейли по доступным ценам.",
             "https://go.2gis.com/LhfVO", 0, "all", 1),
            (13, "У Вас горизонт завален", "бар",
             "Оригинальные коктейли и уникальная атмосфера! Это коктейльный бар, где каждый месяц обновляется коктейльная карта. Гости отмечают внимательность персонала, который помогает подобрать напитки по вкусу. Интерьер заведения располагает к отдыху, а чистота в туалетах всегда на высоте. В меню можно найти авторские коктейли с интересными сочетаниями ингредиентов и закуски для приятного времяпрепровождения за столом.",
             "https://go.2gis.com/No1Ax", 0, "all", 1),
            (14, "Онегин", "рюмочная",
             "Кофейня «Онегин» — это уютное место, где можно провести время в приятной компании, наслаждаясь ароматным кофе, круассанами и коктейлями.",
             "https://go.2gis.com/M72kq", 0, "all", 1),
            (16, "Остров Канта", "достопримечательность",
             "Описание самого острова: Остров Иммануила Канта — историческое место в центре Калининграда, расположенное на реке Преголя. Ранее известный как Кнайпхоф, он был самостоятельным городом до 1724 года. Сегодня остров — зелёная зона с главной достопримечательностью — Кафедральным собором XIV века, где покоится философ Иммануил Кант. Сейчас это культурное пространство с концертами органной музыки, выставками и фестивалями. В 2016 году острову официально присвоили имя Канта в честь его вклада в мировую философию.",
             "https://go.2gis.com/3BoXt", 0, "all", 0),
            (17, "Френсис Дрейк", "паб",
             "Это паб, где можно попробовать разнообразные сорта пива, в том числе редкие. Гости особенно рекомендуют строганину из пеламиды и жареный сыр с брусничным соусом. Интерьер заведения выполнен в английском стиле. Здесь всегда приветливый персонал, который поможет сделать заказ. Это отличное место для встреч небольшими компаниями или посиделок за барной стойкой. Морская тематика",
             "https://go.2gis.com/j5Cfa", 0, "all", 1),
            (18, "Есенин", "бар",
             "Это заведение привлекает внимание стильным интерьером в русском стиле и большим выбором авторских коктейлей. Гости отмечают высокое качество напитков, особенно настойки «Белая ночь». Также посетителям нравятся закуски, такие как тарталетки с разными начинками и оладьи с красной икрой щуки. Это отличное место для приятного отдыха в компании друзей или одиночного времяпрепровождения. Стилизован под серебряный век",
             "https://go.2gis.com/v0jaK", 0, "all", 1),
            (19, "Кафедральный собор", "достопримечательность",
             "В 2008 году здание собора было претендентом на звание одного из чудес России. Это не только редкое для нашей страны готическое здание и не только один из древнейших соборов Европы, но и место захоронения Иммануила Канта, которого многие считают величайшим философом в истории человечества. Точная дата начала строительства собора на новом месте неизвестна. Но его днём рождения считают 13 сентября 1333 года. Сперва храм должен был служить одновременно и крепостью, но гроссмейстер Тевтонского ордена Лютер Брауншвейгский настоял на чисто культовом статусе собора. Долгое время собор был местом захоронения выдающихся представителей высшей светской и духовной иерархии, родовитого дворянства. 28 февраля 1804 года здесь был похоронен Иммануил Кант. Изначально собор проектировался как оборонительное сооружение. В 1807 году часть собора использовалась как военная тюрьма. После войны собор превратился в руины и пребывал в таком состоянии до 1994 года. В 90-е храм реконструировали. Сегодня это величественное сооружение в готическом стиле с высокой башней с часами. В восстановленном здании собора располагаются протестантская, католическая и православная часовни, а также музей собора и музей Иммануила Канта. В соборе находится уникальный для нашей страны органный комплекс и ежедневно два раза в день, в 14-00 и в 18-00 там проходят органные концерты. Документальная дата основания 13 сентября 1333 г.",
             "https://go.2gis.com/gBeFL", 0, "all", 1),
            (20, "Королевские ворота", "достопримечательность",
             "«Королевские ворота — памятник фортификационного искусства XIX века. В их закладке 30 августа 1843 года принимал участие король Пруссии Фридрих Вильгельм IV. Через эти ворота в Кёнигсберг въезжали правители, проходили ремесленники и крестьяне. После Второй мировой войны ворота долгое время находились в крайне тяжёлом состоянии: скульптуры были разрушены, обветшала кирпичная кладка фасадов и внутренних пометий, отсутствовали коммуникации. В плачевном состоянии находилась и окружающая территория. В феврале 2005 года ворота были переданы Музею Мирового океана. Началась реставрация. Летом 2005 года к 750-летнему юбилею города состоялось торжественное открытие ворот. Сегодня здесь находится историко-культурный центр Великое посольство Построены в 1850 г.",
             "https://go.2gis.com/83zIN", 0, "all", 1),
            (21, "Филармония", "достопримечательность",
             "Здание было построено в 1907 году знаменитым прусским архитектором Фридрихом Хайтманном как католическая кирха. Во время проектировки Хайтманн во многом вдохновлялся архитектурой времён Тевтонского ордена. Именно оттуда взята большая часть элементов здания. Кирха построена из красного кирпича. Самая заметная часть здания — высокая башня с часами и крытой медью крышей. Интересно, что в кирхе никогда не проходили панихиды. Только обряды крещения и венчания. Иногда кирху называли Катеринен Кирхе — по названию располагавшегося рядом госпиталя Святой Катерины. В 1945 году церковь была повреждена и долгое время оставалась заброшенной, постепенно разрушалась. В 1980 году после продолжительной реконструкции под руководством архитектора Павла Горбача в ней была открыта Калининградская областная филармония. Построена в 1907 г.",
             "https://go.2gis.com/DgnhF", 0, "all", 1),
            (22, "Калининградский зоопарк", "достопримечательность",
             "Это один из старейших зоопарков России, расположенный в центре города. Посетители особенно отмечают его большую территорию с обилием зелени и деревьев, а также возможность увидеть здесь жирафов, слонов и бегемотов. Зимой некоторых животных перемещают в крытые зимники для их защиты от холода. Калининградский зоопарк — один из старейших зоопарков России, основанный в 1896 году в Кёнигсберге по инициативе профессора Максимилиана Брауна и предпринимателя Германа Клаасса. Сегодня зоопарк занимает территорию более 16 гектаров и содержит свыше 260 видов животных, включая редкие и исчезающие, такие как белый носорог и амурский тигр.Зоопарк также выполняет функции дендропарка: на его территории произрастают редкие виды растений, включая гинкго. В годы Второй мировой войны зоопарк был сильно разрушен, но восстановлен и с 1947 года функционирует как самостоятельное учреждение. Он сохраняет историческую планировку и архитектурные элементы, участвует в международных программах по охране животных и прошёл несколько этапов реконструкции, направленных на улучшение условий содержания животных и комфорта посетителей.",
             "https://go.2gis.com/M2LKW", 0, "all", 0),
            (23, "Зеленоградск", "город",
             "уютный курортный город на берегу Балтийского моря, известный своими широкими песчаными пляжами, дюнами и спокойной атмосферой. Это идеальное место для неспешного отдыха и прогулок.",
             "https://go.2gis.com/ki3TD", 1, "spring,summer", 0)
        ]

        events_data = [
            ("Ситиджаз фест", "XVIII международный музыкальный фестиваль «Калининград Сити Джаз»", "2025-08-01",
             "2025-08-03", "https://vk.com/jazzfestivalru"),
            ("Ночь музеев", "Ежегодная культурная акция", "2024-05-18", "2024-05-18", "https://museum.ru"),
            ("Калининградский марафон", "Городской марафон", "2024-09-15", "2024-09-15",
             "https://kaliningrad-marathon.ru")
        ]

        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()

            cursor.execute("DELETE FROM places")
            cursor.execute("DELETE FROM events")

            cursor.executemany('''
                INSERT OR REPLACE INTO places (id, name, type, description, link, is_seasonal, best_season, indoor)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', places_data)

            cursor.executemany('''
                INSERT INTO events (name, description, start_date, end_date, link)
                VALUES (?, ?, ?, ?, ?)
            ''', events_data)

            conn.commit()



class VisitAgent:

    def __init__(self, db_path: str = "places.db", language:str = 'ru', is_random: bool = False):
        self.db_path = db_path
        self.db = PlacesDatabase(db_path)
        self.client = self.initialize_client()
        self.language = language
        self.is_random = is_random
        self.db.populate_database()

        self.convert_language()

    @staticmethod
    def initialize_client():
        return GigaChat(
            credentials=settings.GIGA_CREDENTIALS,
            model="GigaChat-2-Max",
            profanity_check=False,
            temperature=0.4,
            timeout=120,
            verify_ssl_certs=False
        )

    def convert_language(self):
        language_names = {
            'ru': 'Russian',
            'en': 'English',
            'fr': 'French',
            'es': 'Spanish',
            'cn': 'Chinese Traditional',
            'in': 'Hindi'
        }
        self.language = language_names.get(self.language, 'Russian')

    async def get_recommendations(self, user_query: str) -> str:
        """Get recommendations based on user request"""
        try:
            places = self._get_all_places()

            current_events = self._get_current_events()

            prompt = self._build_prompt(user_query, places, current_events)

            response = await self._get_llm_response(prompt)

            return response

        except Exception as e:
            return f"❌ **Произошла ошибка**\n\nНе удалось подобрать места: {str(e)}"

    def _get_all_places(self) -> List[Dict[str, Any]]:
        """Get all places from DB"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT name, type, description, link, is_seasonal, best_season, indoor 
                FROM places
            ''')

            places = []
            for row in cursor.fetchall():
                places.append({
                    'name': row[0],
                    'type': row[1],
                    'description': row[2],
                    'link': row[3],
                    'is_seasonal': bool(row[4]),
                    'best_season': row[5],
                    'indoor': bool(row[6])
                })
            return places

    def _get_current_events(self) -> List[Dict[str, Any]]:
        """Get actual events"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT name, description, start_date, end_date, link 
                FROM events 
                WHERE is_active = 1 AND end_date >= date('now')
            ''')

            events = []
            for row in cursor.fetchall():
                events.append({
                    'name': row[0],
                    'description': row[1],
                    'start_date': row[2],
                    'end_date': row[3],
                    'link': row[4]
                })
            return events

    def _build_prompt(self, user_query: str, places: List[Dict], events: List[Dict]) -> str:
        """Build prompt for LLM"""
        if self.is_random:
            random_place = random.choice(places)
            prompt_random = f"""
            Ты помощник по подбору мест для посещения в Калининграде.
            Тебе будет дана информация про одно конкретное место, преобразуй в формат ответа.
            
            Место: f"**{random_place['name']}** ({random_place['type']}) - {random_place['description']}\n 🔗 {random_place['link']}\n\n"
            
            Формат ответа в Markdown:
            ЯЗЫК ДЛЯ ТВОЕГО ОТВЕТА: {self.language} - ты должен отвечать ТОЛЬКО на нем в рамках всего задания, даже если входные данные на русском, использование другого языка вместо {self.language} ЗАПРЕЩЕНО!
            
    
            🎯 Рекомендации для вас:
    
            1. **[Название]** [эмодзи]
            📍 **Описание:** [краткое описание]
            🔗 **Ссылка:** [ссылка]
            💡 **Почему подходит:** [обоснование]

            Будь краток и точен"""
            return prompt_random

        else:
            places_context = "Доступные места:\n"
            for i, place in enumerate(places, 1):
                places_context += f"{i}. **{place['name']}** ({place['type']}) - {place['description']}\n"
                if place['is_seasonal']:
                    places_context += f"   🍂 Сезонное место, лучше посещать: {place['best_season']}\n"
                if place['indoor']:
                    places_context += f"   🏛️ Крытое помещение\n"
                places_context += f"   🔗 {place['link']}\n\n"

            events_context = "Актуальные события:\n"
            for event in events:
                events_context += f"🎪 **{event['name']}** - {event['description']} ({event['start_date']} - {event['end_date']})\n"
                events_context += f"   🔗 {event['link']}\n\n"

            prompt = f"""
            Ты помощник по подбору мест для посещения в Калининграде. 
            Пользователь запрашивает: "{user_query}"
    
            {places_context}
            {events_context}
    
            Проанализируй запрос пользователя и подбери ТОП-3 наиболее подходящих места/события.
    
            Требования к ответу:
            - Четкая структура с нумерованным списком
            - Каждый пункт должен содержать эмодзи
            - Сохраняй символы * как в примере
            - Краткое описание (1-2 предложения)
            - Указание типа места
            - Ссылку на 2gis или сайт
            - Почему это подходит под запрос пользователя
    
            Формат ответа в Markdown:
    
            🎯 Рекомендации для вас:
             ЯЗЫК ДЛЯ ТВОЕГО ОТВЕТА: {self.language} - ты должен отвечать ТОЛЬКО на нем в рамках всего задания, даже если входные данные на русском, использование другого языка вместо {self.language} ЗАПРЕЩЕНО!
        
    
            1. **[Название]** [эмодзи]
            📍 **Описание:** [краткое описание]
            🔗 **Ссылка:** [ссылка]
            💡 **Почему подходит:** [обоснование]
    
            2. **[Название]** [эмодзи]
            ...
    
            3. **[Название]** [эмодзи]
            ...
    
            Если есть подходящие события, включи их в рекомендации.
            Будь краток и точен!
            """

            return prompt

    async def _get_llm_response(self, prompt: str) -> str:
        """Get response from LLM"""
        try:
            if self.is_random:
                messages = [HumanMessage(content=prompt)]
                response = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.invoke(messages))
                return response.content

            else:

                messages = [HumanMessage(content=prompt)]
                response = await asyncio.get_event_loop().run_in_executor(
                    None,
                    lambda: self.client.invoke(messages)
                )
                return response.content
        except Exception as e:
            return f"❌ **Ошибка при обработке запроса**\n\nНе удалось получить рекомендации. Попробуйте позже."

    async def close(self):
        """Close connection"""
        if hasattr(self.client, 'close'):
            await self.client.close()
