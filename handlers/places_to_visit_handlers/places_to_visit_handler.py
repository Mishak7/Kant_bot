from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config.logger import logger
import traceback
from handlers.places_to_visit_handlers.places_to_visit_services import VisitAgent
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio


class VisitStates(StatesGroup):
    waiting_for_mood = State()


router = Router()

TEXT = """
        –ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! üéì
–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–∞–º—ã–µ –∫—Ä—É—Ç—ã–µ –º–µ—Å—Ç–∞ –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞?
–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è:
‚Ä¢ üçï –ù–µ–¥–æ—Ä–æ–≥–æ –ø–æ–µ—Å—Ç—å
‚Ä¢ ‚òï –£—é—Ç–Ω–æ –ø–æ—Å–∏–¥–µ—Ç—å —Å –Ω–æ—É—Ç–±—É–∫–æ–º
‚Ä¢ üé≥ –†–∞–∑–≤–ª–µ—á—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏
‚Ä¢ üåø –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞
–ü–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! üëá
"""


@router.callback_query(F.data == "places_to_visit")
async def places_to_visit_handler(callback: CallbackQuery, state: FSMContext, language: str):
    try:
        sent_message = await callback.message.edit_text(
            text=TEXT,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text='–†–∞–Ω–¥–æ–º', callback_data='random_place')],
                                 [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]))

        await state.update_data(places_message_id=sent_message.message_id)

        await state.set_state(VisitStates.waiting_for_mood)
        await callback.answer()
    except Exception as e:
        logger.error(f'Places to visit error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


@router.message(VisitStates.waiting_for_mood)
async def process_mood(message: Message, state: FSMContext, bot: Bot):
    processing_message = None
    try:
        user_message = message.text

        state_data = await state.get_data()
        places_message_id = state_data.get('places_message_id')

        processing_message = await message.answer("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        spinner_frames = ["üîÑ", "‚è≥", "üí≠", "üéØ"]
        for i, frame in enumerate(spinner_frames):
            try:
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=processing_message.message_id,
                    text=f"{frame} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... –ü–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞!"
                )
                if i < len(spinner_frames) - 1:
                    await asyncio.sleep(0.5)
            except:
                pass

        agent = VisitAgent()
        response = await agent.get_recommendations(user_message)

        await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)

        if places_message_id:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=places_message_id)
            except Exception as e:
                logger.warning(f"Could not delete places message: {e}")

        await message.answer(
            response,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_no_delete')]]
            ),
            disable_web_page_preview=True
        )

        await state.clear()

    except Exception as e:
        logger.error(f'Error processing mood: {e}\n{traceback.format_exc()}')

        if processing_message:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_message.message_id)
            except:
                pass

        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
            )
        )


@router.callback_query(F.data == "random_place")
async def random_place_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        places_message_id = state_data.get('places_message_id')

        processing_message = await callback.message.answer("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        spinner_frames = ["üîÑ", "‚è≥", "üí≠", "üéØ"]
        for i, frame in enumerate(spinner_frames):
            try:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=processing_message.message_id,
                    text=f"{frame} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å... –ü–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞!"
                )
                if i < len(spinner_frames) - 1:
                    await asyncio.sleep(0.5)
            except:
                pass

        agent = VisitAgent(is_random=True)
        response = await agent.get_recommendations(' ')

        await bot.delete_message(chat_id=callback.message.chat.id, message_id=processing_message.message_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if places_message_id:
            try:
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=places_message_id)
            except Exception as e:
                logger.warning(f"Could not delete places message in random handler: {e}")

        await callback.message.answer(
            response,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text='–†–∞–Ω–¥–æ–º', callback_data='random_place')],
                                 [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main_no_delete')]]),
            disable_web_page_preview=True
        )

        await state.set_state(VisitStates.waiting_for_mood)
        await callback.answer()
    except Exception as e:
        logger.error(f'Places to visit error: {e}\n{traceback.format_exc()}')
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")